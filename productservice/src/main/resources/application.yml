spring:
  application:
    name: productservice
#  config:
#    import: file:./.env[.properties]
  webflux:
    problemdetails:
      enabled: true
  datasource:
    url: jdbc:postgresql://${DB_POSTGRESQL_HOST}:${DB_POSTGRESQL_PORT_EXTERNAL:5430}/${DB_POSTGRESQL_DATABASE_NAME}?currentSchema=${DB_POSTGRESQL_SCHEMA_NAME}
    username: ${DB_POSTGRESQL_USER}
    password: ${DB_POSTGRESQL_PASSWORD}
  r2dbc:
    host: ${DB_POSTGRESQL_HOST}
    port: ${DB_POSTGRESQL_PORT}
    database: ${DB_POSTGRESQL_DATABASE_NAME}
    username: ${DB_POSTGRESQL_USER}
    password: ${DB_POSTGRESQL_PASSWORD}
    schema: ${DB_POSTGRESQL_SCHEMA_NAME}
  liquibase:
    change-log: classpath:db/changelog/changelog-master.yaml
    contexts: test
    drop-first: false
    parameters:
      schemaName: ${DB_POSTGRESQL_SCHEMA_NAME}
    default-schema: ${DB_POSTGRESQL_SCHEMA_NAME}

server:
  port: ${PRODUCT_SERVICE_PORT:8080}

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html

#http://localhost:8888/spring-boot-config/default, http://localhost:8080/actuator/configprops, a port a sajátja legyen!
#A http://localhost:8080/actuator/health vagy info linken a get kérés megmutatja az aktuális állapotot.
#Lehetőség van arra is, hogy manuálisan idítsunk egy properties frissítést. Ehhez a http://localhost:8080/actuator/refresh linkre kell post kérést küldeni (post/get oldalon állítható), ha a konfig kliens ezen a porton fut
#management.endpoints.web.exposure.include: "*"

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:DEBUG}
    org:
      springframework:
        web: ${LOGGING_LEVEL_ROOT:DEBUG}
    io:
      r2dbc: ${LOGGING_LEVEL_ROOT:DEBUG}
  file:
    path: ${LOG_FOLDER:/tmp}